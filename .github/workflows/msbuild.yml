# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "all-in-one-vs2022-wpo" ]
  pull_request:
    branches: [ "all-in-one-vs2022-wpo" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: ./src/engine-vs2022.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  DX11: DX11
  DX10: DX10
  DX9: DX9
  DX8: DX8
  DX11AVX: DX11AVX
  DX10AVX: DX10AVX
  DX9AVX: DX9AVX
  DX8AVX: DX8AVX

permissions:
  contents: read

jobs:
  build:
    runs-on: windows-latest

    # strategy:
    #   matrix:
    #     buildconf: ["DX11", "DX10", "DX9", "DX8", "DX11-AVX", "DX10-AVX", "DX9-AVX", "DX8-AVX"]

    steps:
    - uses: actions/checkout@v3

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.3.1
      with:
        # Version of Visual Studio to search; defaults to latest if not specified
        # vs-version: '[17.6, 17.7)'
        # The preferred processor architecture of MSBuild. Can be either "x86", "x64", or "arm64". "x64" is only available from Visual Studio version 17.0 and later.
        msbuild-architecture: "x64"

    - name: Build DX11
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX11}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX10
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX10}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX9
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX9}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX8
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX8}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX11AVX
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX11AVX}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX10AVX
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX10AVX}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX9AVX
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX9AVX}} ${{env.SOLUTION_FILE_PATH}}

    - name: Build DX8AVX
      working-directory: ${{env.GITHUB_WORKSPACE}}
      # Add additional options to the MSBuild command line here (like platform or verbosity level).
      # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
      run: msbuild /m /p:Configuration=${{env.DX8AVX}} ${{env.SOLUTION_FILE_PATH}}

    - name: Get Datetime
      id: datetime
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
        format: "YYYY_MM_DD HH_mm_ss_SSS"
        
    # Use the output from the `datetime` step
    - name: Get Version
      run: echo "VERSION ${{steps.datetime.outputs.year}}.${{steps.datetime.outputs.month}}.${{steps.datetime.outputs.day}}"
      env:
        VERSION: "${{steps.datetime.outputs.year}}.${{steps.datetime.outputs.month}}.${{steps.datetime.outputs.day}}" 

    - name: Zip Exe folder
      run: |
        mkdir ./release
        mv ./_build/_game/bin_dbg/AnomalyDX9.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX8.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX10.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX11.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX9AVX.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX8AVX.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX10AVX.exe ./release
        mv ./_build/_game/bin_dbg/AnomalyDX11AVX.exe ./release
        cd ./release
        zip -r 'STALKER-Anomaly-modded-exes_${{env.VERSION}}.zip' ./*
        mv 'STALKER-Anomaly-modded-exes_${{env.VERSION}}.zip' ../
        cd ..
      env: 
        RELEASE_NAME_FULL: "${{env.VERSION}}"

    - name: Zip PDB folder
      run: |
        mkdir ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX9.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX8.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX10.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX11.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX9AVX.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX8AVX.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX10AVX.pdb ./pdb
        mv ./_build/_game/bin_dbg/AnomalyDX11AVX.pdb ./pdb
        cd ./pdb
        zip -r 'STALKER-Anomaly-modded-exes_${{env.VERSION}}_pdb.zip' ./*
        mv 'STALKER-Anomaly-modded-exes_${{env.VERSION}}_pdb.zip' ../
        cd ..
        
    - name: Publish
      uses: "marvinpinto/action-automatic-releases@v1.2.1"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ github.event_name == 'push' && 'latest' || 'pre-release' }}
        prerelease: ${{ github.event_name != 'push' }}
        files: |
          *.zip
