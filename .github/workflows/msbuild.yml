# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: MSBuild

on:
  push:
    branches: [ "all-in-one-vs2022-wpo" ]
  pull_request:
    branches: [ "all-in-one-vs2022-wpo" ]

env:
  # Path to the solution file relative to the root of the project.
  SOLUTION_FILE_PATH: src/engine-vs2022.sln

  # Configuration type to build.
  # You can convert this to a build matrix if you need coverage of multiple configuration types.
  # https://docs.github.com/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
  DX11: DX11
  DX10: DX10
  DX9: DX9
  DX8: DX8
  DX11AVX: DX11-AVX
  DX10AVX: DX10-AVX
  DX9AVX: DX9-AVX
  DX8AVX: DX8-AVX

permissions:
  contents: read

jobs:
  build:
    name: build-job
    runs-on: windows-latest

    strategy:
      matrix:
        buildconf: ["DX11", "DX10", "DX9", "DX8", "DX11-AVX", "DX10-AVX", "DX9-AVX", "DX8-AVX"]

    steps:
    - uses: actions/checkout@v3

    - name: setup-msbuild
      uses: microsoft/setup-msbuild@v1.3.1
      with:
        # Version of Visual Studio to search; defaults to latest if not specified
        # vs-version: '[17.6, 17.7)'
        # The preferred processor architecture of MSBuild. Can be either "x86", "x64", or "arm64". "x64" is only available from Visual Studio version 17.0 and later.
        msbuild-architecture: "x64"

    - name: Fake Build ${{matrix.buildconf}}
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        New-Item -Type Directory -Path "./_build/_game/bin_dbg"
        New-Item -Path "./_build/_game/bin_dbg/${{matrix.buildconf}}.exe"
        New-Item -Path "./_build/_game/bin_dbg/${{matrix.buildconf}}.pdb"

    # - name: Build ${{matrix.buildconf}}
    #   working-directory: ${{env.GITHUB_WORKSPACE}}
    #   # Add additional options to the MSBuild command line here (like platform or verbosity level).
    #   # See https://docs.microsoft.com/visualstudio/msbuild/msbuild-command-line-reference
    #   run: msbuild /m /p:Configuration=${{matrix.buildconf}} ${{env.SOLUTION_FILE_PATH}}

    - name: Upload Exe
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: ${{matrix.buildconf}}_exe
        
        # A file, directory or wildcard pattern that describes what to upload
        path: ./_build/_game/bin_dbg/*.exe
        
        # The desired behavior if no files are found using the provided path. Available Options:
          #  warn: Output a warning but do not fail the action
          #  error: Fail the action with an error message
          #  ignore: Do not output any warnings or errors, the action does not fail
        if-no-files-found: "error"
        
        # Duration after which artifact will expire in days. 0 means using default retention. Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
        retention-days: 1

    - name: Upload PDB
      uses: actions/upload-artifact@v3.1.2
      with:
        # Artifact name
        name: ${{matrix.buildconf}}_pdb
        
        # A file, directory or wildcard pattern that describes what to upload
        path: ./_build/_game/bin_dbg/*.pdb
        
        # The desired behavior if no files are found using the provided path. Available Options:
          #  warn: Output a warning but do not fail the action
          #  error: Fail the action with an error message
          #  ignore: Do not output any warnings or errors, the action does not fail
        if-no-files-found: "error"
        
        # Duration after which artifact will expire in days. 0 means using default retention. Minimum 1 day. Maximum 90 days unless changed from the repository settings page.
        retention-days: 1

  release:
    needs: build
    name: Release
    runs-on: ubuntu-latest
    steps:
    - name: Get Datetime
      id: datetime
      uses: Kaven-Universe/github-action-current-date-time@v1
      with:
        format: "YYYY_MM_DD HH_mm_ss_SSS"
        
    # Use the output from the `datetime` step
    - name: Get Version
      run: echo "VERSION ${{steps.datetime.outputs.year}}.${{steps.datetime.outputs.month}}.${{steps.datetime.outputs.day}}"
      env:
        VERSION: "${{steps.datetime.outputs.year}}.${{steps.datetime.outputs.month}}.${{steps.datetime.outputs.day}}"

    - name: Download artifacts
      uses: actions/download-artifact@v3.0.2

    - name: Zip Exe folder
      run: |
        mkdir release
        mkdir release/bin
        cp -a gamedata/. release
        mv ${{env.DX11}}_exe/*.exe release/bin
        mv ${{env.DX10}}_exe/*.exe release/bin
        mv ${{env.DX9}}_exe/*.exe release/bin
        mv ${{env.DX8}}_exe/*.exe release/bin
        mv ${{env.DX11AVX}}_exe/*.exe release/bin
        mv ${{env.DX10AVX}}_exe/*.exe release/bin
        mv ${{env.DX9AVX}}_exe/*.exe release/bin
        mv ${{env.DX8AVX}}_exe/*.exe release/bin
        cd release
        zip -r 'STALKER-Anomaly-modded-exes_${{env.VERSION}}.zip' ./*
        mv 'STALKER-Anomaly-modded-exes_${{env.VERSION}}.zip' ../
        cd ..
      env: 
        RELEASE_NAME_FULL: "${{env.VERSION}}"

    - name: Zip PDB folder
      run: |
        mkdir pdb
        mv ${{env.DX11}}_pdb/*.pdb pdb
        mv ${{env.DX10}}_pdb/*.pdb pdb
        mv ${{env.DX9}}_pdb/*.pdb pdb
        mv ${{env.DX8}}_pdb/*.pdb pdb
        mv ${{env.DX11AVX}}_pdb/*.pdb pdb
        mv ${{env.DX10AVX}}_pdb/*.pdb pdb
        mv ${{env.DX9AVX}}_pdb/*.pdb pdb
        mv ${{env.DX8AVX}}_pdb/*.pdb pdb
        cd pdb
        zip -r 'STALKER-Anomaly-modded-exes_${{env.VERSION}}_pdb.zip' ./*
        mv 'STALKER-Anomaly-modded-exes_${{env.VERSION}}_pdb.zip' ../
        cd ..

    - name: Remove Artifacts
      # You may pin to the exact commit or the version.
      # uses: remagpie/gha-remove-artifact@17a089caac8f6b2bbcb3a2dab795ec6228e7d6e2
      uses: remagpie/gha-remove-artifact@v1
      with:
        # Maximum age(by seconds) of artifacts to keep.
        max-age: 604800
        
    - name: Publish
      uses: "marvinpinto/action-automatic-releases@v1.2.1"
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: ${{ github.event_name == 'push' && 'latest' || 'pre-release' }}
        prerelease: ${{ github.event_name != 'push' }}
        files: |
          *.zip
